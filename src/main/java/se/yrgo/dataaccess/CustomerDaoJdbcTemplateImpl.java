package se.yrgo.dataaccess;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String CREATE_CUSTOMER_SQL = "CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(255) PRIMARY KEY, COMPANY_NAME VARCHAR(255), EMAIL VARCHAR(255), PHONENUMBER VARCHAR(255), NOTES VARCHAR(255))";
    private static final String CREATE_CALL_SQL = "CREATE TABLE TBL_CALL (CALL_ID integer generated by default as identity(start with 1), CUSTOMER_ID VARCHAR(255) NOT NULL, CALL_DATE DATE NOT NULL, NOTES VARCHAR(255), CONSTRAINT FK_CALL_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID))";
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String SELECT_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String SELECT_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANY_NAME=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, PHONENUMBER=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String FULL_SQL = "SELECT * FROM CUSTOMER";
    private static final String ADD_CALL_SQL = "INSERT INTO TBL_CALL (CUSTOMER_ID, CALL_DATE, NOTES) VALUES (?, ?, ?)";

    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
        createTables();
    }

    @Override
    public void create(Customer customer) {
        template.update("INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, PHONENUMBER, NOTES) VALUES (?, ?, ?, ?, ?)",
        customer.getCustomerId(), customer.getCompanyName(), customer.getEmail(), customer.getTelephone(), customer.getNotes());
    }

    public void createTables() {
        try {
            this.template.execute(CREATE_CUSTOMER_SQL);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Customer table exists");
            e.printStackTrace();
        }
        try {
            this.template.execute(CREATE_CALL_SQL);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            e.printStackTrace();
            System.out.println("Assuming the Call table exists");
        }
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        try {
            return this.template.queryForObject(SELECT_SQL, new CustomerRowMapper(), customerId);
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            throw new RecordNotFoundException();
        }

    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(SELECT_NAME_SQL, new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        int rowsAffected = template.update(
                UPDATE_SQL,
                customerToUpdate.getCompanyName(),
                customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(),
                customerToUpdate.getNotes(),
                customerToUpdate.getCustomerId());

        if (rowsAffected == 0) {
            throw new RecordNotFoundException();
        }
    }


    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(FULL_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        List<Call> calls = template.query("SELECT * FROM TBL_CALL WHERE CUSTOMER_ID=?", new CallRowMapper(), customerId);
        customer.setCalls(calls);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {

         template.update(ADD_CALL_SQL, customerId, newCall.getTimeAndDate(), newCall.getNotes());
    }


}

class CustomerRowMapper implements RowMapper<Customer> {

    @Override
    public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String phoneNumber = rs.getString(4);
        String notes = rs.getString(5);

        return new Customer(customerId, companyName, email, phoneNumber, notes);
    }

}

class CallRowMapper implements RowMapper<Call> {

    @Override
    public Call mapRow(ResultSet rs, int rowNum) throws SQLException {
        Date call_date = rs.getDate(3);
        String notes = rs.getString(4);

        Calendar requiredByCal = new java.util.GregorianCalendar();
        requiredByCal.setTime(call_date);

        Call call = new Call();
        call.setNotes(notes);
        call.setTimeAndDate(call_date);
        return call;
    }
}


